#!/bin/bash

# Helper function to validate branch naming conventions
validate_branch_name() {
  local branch_name=$1
  local regex="^(feat|fix|chore|docs|style|refactor|perf|test)/"
  if [[ ! "$branch_name" =~ $regex ]]; then
    echo "Error: Branch '$branch_name' does not follow naming conventions ($regex)." >&2
    exit 1
  fi
}

# Ensure upstream remote is configured
upstream_url=$(git remote get-url upstream 2>/dev/null)
if [[ -z "$upstream_url" ]]; then
  echo "Error: 'upstream' remote is not configured. Please run 'git remote add upstream git@github.com:aukha-saukha/aukha-saukha.git'." >&2
  exit 1
fi

# Get the current branch being pushed
source_branch=$(git rev-parse --abbrev-ref HEAD)
if [[ -z "$source_branch" ]]; then
  echo "Error: Could not determine the current branch. Please ensure you're in a valid Git repository." >&2
  exit 1
fi

# Attempt to determine the target branch (from remote)
target_branch=$(git rev-parse --symbolic-full-name --abbrev-ref @{upstream} 2>/dev/null | sed 's|.*/||')
# If no upstream branch is set, assume the target is 'main'
if [[ -z "$target_branch" ]]; then
  echo "No upstream branch configured for '$source_branch'. Assuming the target branch is 'main'."
  target_branch="main"
fi

# Logic for repos with only 'main' branch
if [[ "$target_branch" == "main" ]]; then
  # Check if the source branch is the same as the target branch
  if [[ "$source_branch" == "main" ]]; then
    echo "Pushing merged changes to 'main' branch..."
    # Skip branch validation for 'main' branch
  else
    # Ensure source branch follows naming conventions
    validate_branch_name "$source_branch"
  fi
else
  echo "Error: Unknown target branch '$target_branch'. Please ensure you're pushing to a valid branch." >&2
  exit 1
fi

# Run linters before allowing the push
echo "Running linters..."
pnpm run lint
if [[ $? -ne 0 ]]; then
  echo "Error: Linters failed. Please fix the issues and try again." >&2
  exit 1
fi

echo "Push checks passed successfully."
exit 0
